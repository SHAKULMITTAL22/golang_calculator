// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=stringToFloat64_d38659cd50
ROOST_METHOD_SIG_HASH=stringToFloat64_44e80853e6

FUNCTION_DEF=func stringToFloat64(str string) float64 
package golang_calculator_test

import (
	"fmt"
	"os"
	"strconv"
	"testing"

	"github.com/SHAKULMITTAL22/golang_calculator/calc"
)

func TestStringToFloat64(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		expected    float64
		shouldPanic bool
	}{
		{
			name:     "Valid positive float string",
			input:    "123.45",
			expected: 123.45,
		},
		{
			name:     "Valid negative float string",
			input:    "-678.90",
			expected: -678.90,
		},
		{
			name:     "Valid integer string",
			input:    "42",
			expected: 42.0,
		},
		{
			name:     "Valid zero string",
			input:    "0",
			expected: 0.0,
		},
		{
			name:        "Invalid string with letters",
			input:       "abc",
			shouldPanic: true,
		},
		{
			name:        "Invalid string with special characters",
			input:       "123@45",
			shouldPanic: true,
		},
		{
			name:        "Empty string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:     "Valid float with scientific notation",
			input:    "1e3",
			expected: 1000.0,
		},
		{
			name:        "Invalid float with trailing characters",
			input:       "123.45abc",
			shouldPanic: true,
		},
		{
			name:        "Invalid float with leading characters",
			input:       "abc123.45",
			shouldPanic: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.shouldPanic {
				defer func() {
					if r := recover(); r == nil {
						t.Errorf("stringToFloat64(%q) did not panic", tt.input)
					}
				}()
			}

			actual := stringToFloat64(tt.input)
			if !tt.shouldPanic && actual != tt.expected {
				t.Errorf("stringToFloat64(%q) = %f, want %f", tt.input, actual, tt.expected)
			}
		})
	}
}


*/

// ********RoostGPT********


package calc

import (
	"fmt"
	"os"
	"strconv"
	"testing"
	"runtime/debug"
)







func TestStringToFloat64(t *testing.T) {
	type testCase struct {
		name        string
		input       string
		expected    float64
		shouldPanic bool
	}

	tests := []testCase{
		{
			name:     "Valid positive float string",
			input:    "123.45",
			expected: 123.45,
		},
		{
			name:     "Valid negative float string",
			input:    "-678.90",
			expected: -678.90,
		},
		{
			name:     "Valid integer string",
			input:    "42",
			expected: 42.0,
		},
		{
			name:     "Valid zero string",
			input:    "0",
			expected: 0.0,
		},
		{
			name:        "Invalid string with letters",
			input:       "abc",
			shouldPanic: true,
		},
		{
			name:        "Invalid string with special characters",
			input:       "123@45",
			shouldPanic: true,
		},
		{
			name:        "Empty string",
			input:       "",
			shouldPanic: true,
		},
		{
			name:     "Valid float with scientific notation",
			input:    "1e3",
			expected: 1000.0,
		},
		{
			name:        "Invalid float with trailing characters",
			input:       "123.45abc",
			shouldPanic: true,
		},
		{
			name:        "Invalid float with leading characters",
			input:       "abc123.45",
			shouldPanic: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.shouldPanic {
				defer func() {
					if r := recover(); r == nil {
						t.Errorf("stringToFloat64(%q) did not panic", tt.input)
					}
				}()
			} else {
				defer func() {
					if r := recover(); r != nil {
						t.Logf("Panic encountered so failing test. %v\n%s", r, string(debug.Stack()))
						t.Fail()
					}
				}()
			}

			actual := stringToFloat64(tt.input)
			if !tt.shouldPanic && actual != tt.expected {
				t.Errorf("stringToFloat64(%q) = %f, want %f", tt.input, actual, tt.expected)
			} else {
				t.Logf("stringToFloat64(%q) = %f, as expected", tt.input, actual)
			}
		})
	}
}