// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=Modulo_7e9e651e69
ROOST_METHOD_SIG_HASH=Modulo_502e1458a3

FUNCTION_DEF=func Modulo(num1, num2 int) int // Modulo operation

package calc

import "math"

*/

// ********RoostGPT********

package calc

import (
	"testing"
)

func TestModulo(t *testing.T) {
	type testCase struct {
		num1        int
		num2        int
		expected    int
		description string
	}

	tests := []testCase{
		{num1: 10, num2: 2, expected: 0, description: "10 modulo 2 should be 0"},
		{num1: 7, num2: 3, expected: 1, description: "7 modulo 3 should be 1"},
		{num1: 0, num2: 5, expected: 0, description: "0 modulo 5 should be 0"},
		{num1: -10, num2: 3, expected: -1, description: "-10 modulo 3 should be -1"},
		{num1: 10, num2: -3, expected: 1, description: "10 modulo -3 should be 1"},
		{num1: -10, num2: -3, expected: -1, description: "-10 modulo -3 should be -1"},
		{num1: 5, num2: 0, expected: 0, description: "5 modulo 0 should panic"},
	}

	for _, tc := range tests {
		t.Run(tc.description, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					if tc.num2 == 0 {
						t.Logf("Expected panic for division by zero. %v", r)
					} else {
						t.Logf("Panic encountered so failing test. %v", r)
						t.Fail()
					}
				}
			}()

			result := Modulo(tc.num1, tc.num2)
			if result != tc.expected {
				t.Logf("expected %d but got %d", tc.expected, result)
				t.Fail()
			} else {
				t.Logf("expected %d and got %d", tc.expected, result)
			}
		})
	}
}
