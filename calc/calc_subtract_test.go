// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Subtract_58eac52f91
ROOST_METHOD_SIG_HASH=Subtract_b1211baa34

FUNCTION_DEF=func Subtract(num1, num2 int) int // Subtract two integers

Scenario 1: Subtraction of two positive numbers

Details:
Description: This test is meant to check the correct output when subtracting two positive numbers. The function should return the difference of the two numbers.
Execution:
Arrange: Two positive integers are required for the test ; Example: 5 and 3
Act: Invoke the Subtract function with the two integers
Assert: Use Go's testing framework to verify that the result is 2.
Validation:
The function is expected to correctly subtract two positive numbers. This case ensures that the function can subtract numbers as expected. It is important for the normal operations of a system that requires subtraction functionalities.

Scenario 2: Subtraction of two negative numbers

Details:
Description: This test is meant to check the correct output when subtracting two negative numbers. The function should return the difference of the two numbers.
Execution:
Arrange: Two negative integers are required for the test ; Example: -5 and -3
Act: Invoke the Subtract function with the two integers
Assert: Use Go's testing framework to verify that the result is -2.
Validation:
The function is expected to correctly subtract two negative integers. This case ensures that the function can handle negative numbers properly. This is of crucial importance in financial calculations where negative values often represent debts or losses.

Scenario 3: Subtracting zero from a number

Details:
Description: This test is meant to check the correct output when subtracting zero from a number. The function should return the number itself as result.
Execution:
Arrange: Required integers for this test case would be any integer and zero ; Example: 5 and 0
Act: Invoke the Subtract function with the two integers
Assert: Use Go's testing framework to verify that the result is 5.
Validation:
The function is expected to correctly handle the subtraction of zero from any number. This is important to validate the function's handling of zero in subtraction operations.

Scenario 4: Subtracting a number from zero

Details:
Description: This test is meant to check the correct output when subtracting a number from zero. The function should return negative of the number.
Execution:
Arrange: Required integers for this test case would be zero and any integer ; Example: 0 and 5
Act: Invoke the Subtract function with the two integers
Assert: Use Go's testing framework to verify that the result is -5.
Validation:
The subtraction function needs to correctly handle the scenario of subtracting a number from zero, leading to a negative result. This test scenario checks this functionality.
*/

// ********RoostGPT********

package calc

import "testing"

func TestSubtract(t *testing.T) {

	scenarios := []struct {
		Description string
		Num1        int
		Num2        int
		Expected    int
	}{
		{
			Description: "Subtraction of two positive numbers",
			Num1:        5,
			Num2:        3,
			Expected:    2,
		},
		{
			Description: "Subtraction of two negative numbers",
			Num1:        -5,
			Num2:        -3,
			Expected:    -2,
		},
		{
			Description: "Subtracting zero from a number",
			Num1:        5,
			Num2:        0,
			Expected:    5,
		},
		{
			Description: "Subtracting a number from zero",
			Num1:        0,
			Num2:        5,
			Expected:    -5,
		},
	}

	for _, tt := range scenarios {
		t.Run(tt.Description, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered in test: %v\n", r)
					t.Fail()
				}
			}()

			result := Subtract(tt.Num1, tt.Num2)
			if result != tt.Expected {
				t.Errorf("Failed: %s: Subtract(%d, %d): expected %d, received %d", tt.Description, tt.Num1, tt.Num2, tt.Expected, result)
			} else {
				t.Logf("Success: %s: Subtract(%d, %d): expected %d, received %d", tt.Description, tt.Num1, tt.Num2, tt.Expected, result)
			}
		})
	}
}
