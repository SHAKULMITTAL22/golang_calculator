// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Power_2542f03efe
ROOST_METHOD_SIG_HASH=Power_feb9859574

FUNCTION_DEF=func Power(base, exponent float64) float64
Scenario 1: Positive base and exponent test

Details:
  Description: This test checks the calculation of power when both base and exponent are positive numbers.
Execution:
  Arrange: Here, we don't require setup as input parameters are directly provided.
  Act: Invoke the Power function with positive value for base and exponent.
  Assert: Use Go testing facilities to verify that the actual results match the expected outcomes.
Validation:
  We use assert to check if the returned value matches with the mathematical calculated value of provided base and exponent. This test is important because it confirms the function's ability to calculate power for positive numbers as base and exponent.

Scenario 2: Negative base and positive exponent test

Details:
  Description: This test checks power calculation where base is negative and exponent is positive.
Execution:
  Arrange: No setup required here.
  Act: Invoke the Power function with a negative value for base and a positive value for exponent.
  Assert: Use Go testing facilities to make sure the returned result matches the expected result.
Validation:
  The assert checks if the returned value matches the mathematical calculated value of the provided negative base and positive exponent. This tests the capability of the function to handle situation when base is negative and the exponent is positive.

Scenario 3: Negative base and exponent test

Details:
  Description: The test is meant to check the functionâ€™s ability to compute power when both base and exponent are negative.
Execution:
  Arrange: No setup required here.
  Act: Invoke the Power function with negative values for both base and exponent.
  Assert: Use Go testing facilities to verify that the result matches the expected calculation.
Validation:
  The verification checks if the returned value matches the mathematically calculated value using the provided negative base and exponent. This tests the function's ability to handle conditions where both base and exponent are negative.

Scenario 4: Zero base and positive exponent test

Details:
  Description: This test checks the response of the function when the base is zero and the exponent is positive.
Execution:
  Arrange: No recent setup required as parameters are directly provided.
  Act: Invoke the Power function with zero as the base and a positive number as the exponent.
  Assert: Use Go testing facilities to verify that function handles this condition correctly and returns zero.
Validation:
  The assert checks if the returned value is zero, because any number raised to the power of zero is zero itself. In an application's context, handling zero values correctly is important to maintain data integrity and avoid potential programming bugs.

Scenario 5: Positive base and zero exponent test

Details:
  Description: This scenario checks the function's response when base is a positive number and exponent is zero.
Execution:
  Arrange: No setup required.
  Act: Invoke the Power function with a positive base and zero as exponent.
  Assert: Test and verify that the function returns one, in conformity of mathematical rules.
Validation:
  The assert checks if the returned value is one, as per mathematical rules, any positive number raised to the power of zero is one. This is a fundamental rule for the power function, and important to make sure that this scenario is handled correctly.
*/

// ********RoostGPT********

package calc

import (
	"testing"
)

func TestPower(t *testing.T) {

	tests := []struct {
		name                 string
		base, exponent, want float64
	}{
		{
			name:     "Positive base and exponent test",
			base:     2,
			exponent: 3,
			want:     8,
		},
		{
			name:     "Negative base and positive exponent test",
			base:     -2,
			exponent: 3,
			want:     -8,
		},
		{
			name:     "Negative base and exponent test",
			base:     -2,
			exponent: -3,
			want:     -0.125,
		},
		{
			name:     "Zero base and positive exponent test",
			base:     0,
			exponent: 3,
			want:     0,
		},
		{
			name:     "Positive base and zero exponent test",
			base:     2,
			exponent: 0,
			want:     1,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered, hence failing test. %v", r)
					t.Fail()
				}
			}()
			got := Power(test.base, test.exponent)
			if got != test.want {
				t.Errorf("Power(%f, %f) = %f; want %f", test.base, test.exponent, got, test.want)
			}
		})
	}
}
