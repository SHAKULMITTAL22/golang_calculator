// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=Factorial_513839fa2e
ROOST_METHOD_SIG_HASH=Factorial_9132ae250d

FUNCTION_DEF=// Factorial (Recursive)
func Factorial(n int) int 
Scenario 1: Normal Operation - Factorial of Positive Integer

Details:
  Description: This test verifies that the Factorial function correctly calculates the factorial of a positive integer.
Execution:
  Arrange: Prepare a positive integer value, e.g., 5.
  Act: Call the Factorial function with the prepared value.
  Assert: Check that the returned result is equal to the expected factorial value (120 in this case).
Validation:
  The choice of assertion is straightforward as the factorial of 5 is a well-defined mathematical value. This test ensures that the function correctly handles normal input and produces the expected output.


*/

// ********RoostGPT********


package calc

import (
	"runtime/debug"
	"testing"
)







func TestFactorial(t *testing.T) {

	type testCase struct {
		input    int
		expected int
	}

	tests := []testCase{
		{input: 0, expected: 1},
		{input: 1, expected: 1},
		{input: 5, expected: 120},
		{input: 10, expected: 3628800},
		{input: 20, expected: 2432902008176640000},
	}

	for _, tc := range tests {
		t.Run("Factorial", func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v\n%s", r, string(debug.Stack()))
					t.Fail()
				}
			}()

			result := Factorial(tc.input)

			if result != tc.expected {
				t.Errorf("Factorial(%d) = %d; want %d", tc.input, result, tc.expected)
			} else {
				t.Logf("Factorial(%d) = %d; expected %d - Test Passed", tc.input, result, tc.expected)
			}
		})
	}

	t.Run("Factorial negative input", func(t *testing.T) {
		defer func() {
			if r := recover(); r != nil {
				t.Logf("Panic encountered so failing test. %v\n%s", r, string(debug.Stack()))
				t.Fail()
			}
		}()

		defer func() {
			if r := recover(); r == nil {
				t.Error("Factorial(-5) did not panic; want panic")
			} else {
				t.Logf("Factorial(-5) panicked as expected: %v - Test Passed", r)
			}
		}()
		Factorial(-5)
	})
}