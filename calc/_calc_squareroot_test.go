// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=SquareRoot_17095d9165
ROOST_METHOD_SIG_HASH=SquareRoot_232943a56a

FUNCTION_DEF=func SquareRoot(num float64) float64 // Square root (with error handling)

Scenario 1: Testing with a positive number
Details:
    Description: The test will check the functionality of the function when passed a positive float64 number and ensures the correct square root is returned.

Execution:
    Arrange: Set up a positive float64 number variable such as 'num = 44.0'.
    Act: Invoke the SquareRoot function with 'num' as the parameter.
    Assert: Use Go's testing.Equal to verify that the returned square root matches the expected outcome.

Validation:
    The assertion choice is logical since we expect the function to return a correct square root of the input number. Because the square root operation is basic and fundamental, it is crucial to verify this test pass for the overall reliability of the software.

Scenario 2: Testing with zero as the input
Details:
    Description: This test scenario is to handle the case where the input number is zero. According to mathematical rules, the square root of 0 is also 0.

Execution:
    Arrange: Set up a float64 number variable and assign it zero 'num = 0.0'.
    Act: Invoke the SquareRoot function with 'num' as the parameter.
    Assert: Use Go's testing.Equal to confirm that the returned value is also zero.

Validation:
    The assertion makes sense because the square root of zero should be zero - as defined by standard mathematical principles. This test is vital to make sure that the function doesn't treat zero input as an error or edge case.

Scenario 3: Testing with a negative number
Details:
    Description: This test scenario is to handle the case where the input number is negative.

Execution:
    Arrange: Set up a negative float64 number variable such as 'num = -4.0'.
    Act: Invoke the SquareRoot function with 'num' as the parameter.
    Assert: Use Go's testing Panics function to confirm that the function correctly throws a panic.

Validation:
    The assertion completes here because it is impossible to calculate the square root of a negative number. So, in this case, we should expect a panic which the function is supposed to throw when it encounters negative input. This test is crucial in handling negative inputs and preventing application crashes caused by unhandled errors in input.
*/

// ********RoostGPT********

package calc

import (
	"math"
	"testing"
)

type TestData struct {
	input          float64
	expectedResult float64
	expectPanic    bool
}

func TestSquareRoot(t *testing.T) {

	testCases := []TestData{
		{44.0, math.Sqrt(44.0), false},
		{0.0, 0, false},
		{-4.0, 0, true},
	}

	for i, tc := range testCases {
		t.Run("testCase"+string(i), func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered. %v", r)
					if !tc.expectPanic {
						t.Fail()
					}
				}
			}()

			output := SquareRoot(tc.input)

			if output != tc.expectedResult {
				t.Errorf("Test failed for input %v. Expected output %v, reality is %v.",
					tc.input, tc.expectedResult, output)
			}

			t.Logf("Test passed for input %v with expected output %v.", tc.input, tc.expectedResult)
		})

	}
}
