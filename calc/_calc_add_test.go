// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=Add_61b83cbd8d
ROOST_METHOD_SIG_HASH=Add_9b37ae6611

FUNCTION_DEF=func Add(num1, num2 int) int // Add two integers

Note: Only generate test cases based on the given scenarios, do not generate test cases other than these scenarios
Scenario 1: Adding a positive and a negative integer
Scenario 2: Adding zero to a positive integer
*/

// ********RoostGPT********

package calc

import (
	"os"
	"runtime/debug"
	"testing"
)

func TestAdd(t *testing.T) {

	tests := []struct {
		name     string
		num1     int
		num2     int
		expected int
	}{
		{
			name:     "Adding a positive and a negative integer",
			num1:     5,
			num2:     -3,
			expected: 2,
		},
		{
			name:     "Adding zero to a positive integer",
			num1:     5,
			num2:     0,
			expected: 5,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v\n%s", r, string(debug.Stack()))
					t.Fail()
				}
			}()

			old := os.Stdout
			r, w, _ := os.Pipe()
			os.Stdout = w

			result := Add(tt.num1, tt.num2)

			w.Close()
			os.Stdout = old

			if result != tt.expected {
				t.Logf("Expected %d, but got %d", tt.expected, result)
				t.Fail()
			} else {
				t.Logf("Test passed: %s", tt.name)
			}
		})
	}
}
