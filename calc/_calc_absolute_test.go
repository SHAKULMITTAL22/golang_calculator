// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=Absolute_d231f0ab10
ROOST_METHOD_SIG_HASH=Absolute_ec3c06e5a3

FUNCTION_DEF=func Absolute(num float64) float64 // Absolute value

Note: Only generate test cases based on the given scenarios, do not generate test cases other than these scenarios
Scenario 1: Test with positive number to ensure it returns the same number
Scenario 2: Test with negative number to ensure it returns the positive equivalent
*/

// ********RoostGPT********

package calc

import (
	"fmt"
	"os"
	"runtime/debug"
	"testing"
)

func TestAbsolute(t *testing.T) {

	type test struct {
		input    float64
		expected float64
	}

	tests := []test{
		{input: 5.0, expected: 5.0},
		{input: -3.0, expected: 3.0},
	}

	for _, tc := range tests {
		t.Run(fmt.Sprintf("input:%f", tc.input), func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v\n%s", r, string(debug.Stack()))
					t.Fail()
				}
			}()

			old := os.Stdout
			r, w, _ := os.Pipe()
			os.Stdout = w

			result := Absolute(tc.input)

			w.Close()
			os.Stdout = old

			if result != tc.expected {
				t.Logf("Expected %f but got %f", tc.expected, result)
				t.Fail()
			} else {
				t.Logf("Test passed for input %f", tc.input)
			}
		})
	}
}
