// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=SquareRoot_17095d9165
ROOST_METHOD_SIG_HASH=SquareRoot_232943a56a

FUNCTION_DEF=func SquareRoot(num float64) float64 // Square root (with error handling)

 Scenario 1: Valid Positive Input

Details:
  Description: This test scenario checks the functionality of the SquareRoot function with a valid positive input to ensure it returns the correct square root.
Execution:
  Arrange: Prepare a positive float64 number.
  Act: Call the SquareRoot function with the prepared number.
  Assert: Verify that the returned value is the correct square root of the input number.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.


*/

// ********RoostGPT********

package calc

import (
	"fmt"
	"runtime/debug"
	"testing"
)

type squareRootTest struct {
	input  float64
	output float64
}

func TestSquareRoot(t *testing.T) {

	tests := []squareRootTest{
		{input: 4, output: 2},
		{input: 9, output: 3},
		{input: 16, output: 4},
		{input: 0, output: 0},
		{input: 1, output: 1},
		{input: 0.25, output: 0.5},
	}

	for _, tt := range tests {
		t.Run(fmt.Sprintf("input=%v", tt.input), func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v\n%s", r, string(debug.Stack()))
					t.Fail()
				}
			}()

			result := SquareRoot(tt.input)

			if result != tt.output {
				t.Errorf("SquareRoot(%v) = %v, want %v", tt.input, result, tt.output)
			} else {
				t.Logf("SquareRoot(%v) = %v, as expected", tt.input, result)
			}
		})
	}

	t.Run("input=-4", func(t *testing.T) {
		defer func() {
			if r := recover(); r == nil {
				t.Errorf("Expected panic for negative input, but got none")
			} else {
				t.Logf("Panic encountered as expected: %v", r)
			}
		}()

		SquareRoot(-4)
	})
}
