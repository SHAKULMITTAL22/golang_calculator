// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=SquareRoot_17095d9165
ROOST_METHOD_SIG_HASH=SquareRoot_232943a56a

FUNCTION_DEF=func SquareRoot(num float64) float64 // Square root (with error handling)

Scenario 1: Calculate Square root of a Positive Number

Details:
  Description: This test is meant to check if the function calculates the square root of a positive floating number correctly.
Execution:
  Arrange: No data needs to be arranged in this case as inputs are primitive values.
  Act: Invoke the SquareRoot function by passing a positive floating number.(e.g 4.0)
  Assert: Use Go's testing facilities to verify the output matches the square root of the passed number.
Validation:
  The expected output should be 2 as the square root of 4 is 2. This test is critical as it checks the basic functionality of the SquareRoot function.

Scenario 2: Check behavior with Negative Input

Details:
  Description: This test is meant to check the function behavior when a negative floating number is input.
Execution:
  Arrange: No data needs to be arranged in this case as inputs are primitive values.
  Act: Invoke the SquareRoot function by passing a negative floating number.(e.g -4.0)
  Assert: Use Go's testing facilities to verify if the function panics.
Validation:
  The SquareRoot function should panic when a negative number is passed because a square root of a negative number is not defined. This test is essential as it tests the function's error handling capability.

Scenario 3: Zero Input Test

Details:
  Description: This test is meant to check the function behavior when zero is passed as input.
Execution:
  Arrange: No data needs to be arranged in this case as inputs are primitive values.
  Act: Invoke the SquareRoot function by passing a zero.
  Assert: Use Go's testing facilities to verify that the output matches with the square root of the passed number.
Validation:
  The expected output should be 0 because the square root of 0 is 0. This scenario is essential as it checks the function's correctness for edge case scenarios.

Scenario 4: Calculate Square root of a Fraction

Details:
  Description: This test is meant to check the function behavior when a fraction number is passed as input.
Execution:
  Arrange: No data needs to be arranged in this case as inputs are primitive values.
  Act: Invoke the SquareRoot function by passing a fraction (e.g 0.0625)
  Assert: Use Go's testing facilities to verify that the output matches with the square root of the input number.
Validation:
  The expected output should be 0.25 as the square root of 0.0625 is 0.25. Fraction inputs are common, and hence, it is essential to ensure the function handles them properly.
*/

// ********RoostGPT********

package calc

import (
	"testing"
)

type test struct {
	input  float64
	panic  bool
	output float64
}

func TestSquareRoot(t *testing.T) {

	tests := []test{
		{4.0, false, 2.0},
		{-4.0, true, 0.0},
		{0.0, false, 0.0},
		{0.0625, false, 0.25},
	}

	for _, tc := range tests {

		if tc.panic {
			t.Run("Panic Test", func(t *testing.T) {
				defer func() {
					if r := recover(); r != nil {
						t.Logf("Panic detected as expected: %v \n", r)
					} else {
						t.Fail()
						t.Log("Expected a panic but no panic occured")
					}
				}()

				_ = SquareRoot(tc.input)
			})
		} else {
			t.Run("Normal Test", func(t *testing.T) {
				defer func() {
					if r := recover(); r != nil {
						t.Fail()
						t.Logf("No panic expected but got panic: %v \n", r)
					}
				}()

				result := SquareRoot(tc.input)
				if result != tc.output {
					t.Fail()
					t.Logf("For input %.2f, expected %.2f but got %.2f", tc.input, tc.output, result)
				} else {
					t.Logf("For input %.2f, expected %.2f and got %.2f", tc.input, tc.output, result)
				}
			})
		}
	}
}
