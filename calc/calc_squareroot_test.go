// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=SquareRoot_17095d9165
ROOST_METHOD_SIG_HASH=SquareRoot_232943a56a

FUNCTION_DEF=func SquareRoot(num float64) float64 // Square root (with error handling)

Scenario 1: Positive Number
Details:
    Description: The test validates if the function correctly returns the square root of a positive number. This is the functionâ€™s base functional scenario.
Execution:
    Arrange: No special arrangement is required as inputs are directly fed into the function.
    Act: Call SquareRoot with a positive number such as 4.
    Assert: Validate if the output received is 2, which is the square root of 4.
Validation:
    The output should be the square root of the input number.
    Importance of this test is to ensure that the function correctly computes the square root of a positive number which is its core functional requirement.

Scenario 2: Zero Value
Details:
    Description: This test scenario checks if the function correctly handles zero input. It is expected to return zero which is the square root of zero.
Execution:
    Arrange: No special arrangement is required as inputs are directly fed into the function.
    Act: Call SquareRoot with 0 as input.
    Assert: Validate if the output received is zero.
Validation:
    The output should be zero which is the square root of zero.
    Importance of this test is to ensure that the function correctly handles zeros and doesn't break or return any unexpected value.

Scenario 3: Negative Number
Details:
    Description: This test scenario checks if the function correctly handles negative numbers and raises an error as applying square root function on these values is undefined in real numbers.
Execution:
    Arrange: No special arrangement is required as inputs are directly fed into the function.
    Act: Call SquareRoot with a negative number such as -1.
    Assert: Validate if the function raises a panic as expected.
Validation:
    The function should raise a panic when a negative number is provided as an input.
    Importance of this test is to ensure that the function correctly applies checks for undefined scenarios and handles them appropriately with an error.
*/

// ********RoostGPT********

package calc

import (
	"runtime/debug"
	"testing"
)

func TestSquareRoot(t *testing.T) {

	tests := []struct {
		name      string
		input     float64
		expected  float64
		wantPanic bool
	}{
		{
			name:      "Positive Number",
			input:     4,
			expected:  2,
			wantPanic: false,
		},
		{
			name:      "Zero Value",
			input:     0,
			expected:  0,
			wantPanic: false,
		},
		{
			name:      "Negative Number",
			input:     -1,
			wantPanic: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					if tt.wantPanic {
						t.Logf("Panic expected and happened for input: %f.\n%s", tt.input, string(debug.Stack()))
					} else {
						t.Errorf("Panic unexpected for input: %f. %v\n%s", tt.input, r, string(debug.Stack()))
					}
				}
			}()

			actual := SquareRoot(tt.input)

			if !tt.wantPanic && actual != tt.expected {
				t.Errorf("Failed %s: SquareRoot(%f): Expected %f but returned %f", tt.name, tt.input, tt.expected, actual)
			} else {
				t.Logf("Success %s: SquareRoot(%f): Expected %f and returned %f", tt.name, tt.input, tt.expected, actual)
			}
		})
	}
}
