// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=SquareRoot_17095d9165
ROOST_METHOD_SIG_HASH=SquareRoot_232943a56a

FUNCTION_DEF=func SquareRoot(num float64) float64 // Square root (with error handling)

Scenario 1: Square Root of a Positive Number

Details:
  Description: This test scenario checks the positive flow when the SquareRoot function is supplied with a positive number. It ensures that the function can calculate the square root of a given number correctly.
Execution:
  Arrange: The test needs a positive float64, for example, number 9.0.
  Act: Invoking the SquareRoot function with the positive number from the arrange step.
  Assert: The actual results need to be checked against the correct square root of 9, which is 3.
Validation:
  The assertion checks if the SquareRoot function returns the square root of a positive number correctly. This test is essential since the primary purpose of the SquareRoot function is to calculate the square root of a given number.

Scenario 2: Square Root of Zero

Details:
  Description: This test scenario checks the edge case when the SquareRoot function is supplied with zero. It verifies that the function return is zero.
Execution:
  Arrange: The test needs a float64 zero.
  Act: Invoking the SquareRoot function with the value from the arrange step.
  Assert: The actual result needs to be checked against zero, as the square root of zero is zero.
Validation:
  The assertion checks if the SquareRoot function handles the edge case of a zero input correctly by returning zero. This test is crucial to verify the function's behavior on edge inputs.

Scenario 3: Square Root of Negative Number

Details:
  Description: This test scenario validates how the SquareRoot function handles the square root of a negative number. According to mathematical rules, the square root of a negative number is not defined; thus, it is expected to panic with an appropriate error message.
Execution:
  Arrange: The test needs a negative float64, for example, a number like -9.0.
  Act: Invoking the SquareRoot function with the negative number from the arrange step.
  Assert: The function should panic and return an error message "square root of a negative number is not defined."
Validation:
  The assertion confirms if the SquareRoot function handles the mathematical error correctly by observing the panic scenario. This test is essential to verify the function's proper error handling in mathematical scenarios.

*/

// ********RoostGPT********

package calc

import (
	"testing"
)

func TestSquareRoot(t *testing.T) {

	cases := []struct {
		name    string
		input   float64
		want    float64
		wantErr bool
	}{
		{"Square Root of a Positive Number", 9, 3, false},
		{"Square Root of Zero", 0, 0, false},
		{"Square Root of a Negative Number", -9, 0, true},
	}

	for _, tc := range cases {

		t.Run(tc.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					if !tc.wantErr {
						t.Errorf("test case failed due to unexpected panic: %v", r)
					}
					t.Logf("Panic encountered as expected. Error: %v", r)
					return
				}
			}()

			got := SquareRoot(tc.input)

			if got != tc.want {
				t.Errorf("SquareRoot(%f) got %f, wanted %f", tc.input, got, tc.want)
			}

			if tc.wantErr {
				t.Log("SquareRoot of a negative number panicked as expected")
			} else {
				t.Logf("SquareRoot(%f) succeeded and returned %f", tc.input, got)
			}

		})
	}
}
