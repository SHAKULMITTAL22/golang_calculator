// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=SquareRoot_17095d9165
ROOST_METHOD_SIG_HASH=SquareRoot_232943a56a

FUNCTION_DEF=func SquareRoot(num float64) float64 // Square root (with error handling)

```
Scenario 1: Testing the square root of a positive number

Details:
    Description: This test is meant to check the SquareRoot function when it receives a positive number as a parameter. It verifies that the function correctly returns the square root of the input number.
Execution:
    Arrange: Provide a positive number, for example, 4. The expected result is 2.
    Act: Invoke the SquareRoot function with the number.
    Assert: Use Go's testing facilities to confirm that the returned value is 2.
Validation:
    The equality assertion is used in this case to verify that the actual result matches the expected outcome. The test ensures the function correctly calculates the square root of positive numbers, which is one of its primary behaviors.

Scenario 2: Testing the square root of zero

Details:
    Description: This test checks whether the SquareRoot function can handle zero as input and correctly returns zero as the square root of zero.
Execution:
    Arrange: Provide zero as the input to the function. The expected result is 0.
    Act: Invoke the SquareRoot function with zero.
    Assert: Verify that the function indeed returns zero.
Validation:
    Again, equality assertion is used here to make sure that the actual result matches the expected outcome. The test is important because zero is a special case that the function must correctly handle.

Scenario 3: Testing the square root of a negative number

Details:
    Description: This test verifies that the SquareRoot function correctly panics when it receives a negative number since the square root of a negative number is not defined (in real numbers).
Execution:
    Arrange: Provide a negative number as the input to the function.
    Act: Invoke the SquareRoot function with the negative number.
    Assert: Use Go's recovery mechanisms to confirm that the function panics.
Validation:
    In this case, the assertion verifies that a panic occurs when the function is handed a negative number, which is the correct behavior. The test is important because it checks that the function behaves correctly when it encounters this error condition.
```
*/

// ********RoostGPT********

package calc

import (
	"testing"
)

func TestSquareRoot(t *testing.T) {
	type args struct {
		num float64
	}

	tests := []struct {
		name    string
		args    args
		want    float64
		wantErr bool
	}{
		{
			name: "Scenario 1: Testing the square root of a positive number",
			args: args{num: 4},
			want: 2,
		},
		{
			name: "Scenario 2: Testing the square root of zero",
			args: args{num: 0},
			want: 0,
		},
		{
			name:    "Scenario 3: Testing the square root of a negative number",
			args:    args{num: -4},
			wantErr: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v", r)
					if tt.wantErr == false {
						t.Fail()
					}
				}
			}()
			if got := SquareRoot(tt.args.num); !tt.wantErr && got != tt.want {
				t.Errorf("SquareRoot() = %v, want %v", got, tt.want)
			}
		})
	}
}
