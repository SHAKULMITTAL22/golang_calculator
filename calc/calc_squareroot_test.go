// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=SquareRoot_17095d9165
ROOST_METHOD_SIG_HASH=SquareRoot_232943a56a

FUNCTION_DEF=func SquareRoot(num float64) float64 // Square root (with error handling)

Scenario 1: Test SquareRoot function with positive number

Details:
    Description: This test is meant to check if the SquareRoot function is correctly computing the square root of a positive number and returning the right output.
Execution:
    Arrange: No special data setup is required, the function can be directly invoked.
    Act: Invoke the SquareRoot function with a positive number.
    Assert: Assert that the return value of the function is as expected, by comparing it to math.Sqrt(num).
Validation:
    The choice of assertion, that the return value equals math.Sqrt(num), asserts that the function correctly calculates the square root. This test is essential to verify the function's normal operation and expected behavior.

Scenario 2: Test SquareRoot function with zero

Details:
    Description: This test is meant to check the behavior of the SquareRoot function when the input is zero.
Execution:
    Arrange: No special data setup is required, the function can be directly invoked.
    Act: Invoke the SquareRoot function with zero as input.
    Assert: Assert that the return value of the function is zero.
Validation:
    According to the mathematical principle, the square root of zero is zero. Hence, the assertion is that the return value should be zero. This test is important to ensure that the function correctly handles edge cases.

Scenario 3: Test SquareRoot function with negative number

Details:
    Description: This test scenario is meant to validate the error handling of the function when it is provided with a negative number.
Execution:
    Arrange: No special data setup is required, the function can be directly invoked.
    Act: Invoke the SquareRoot function with a negative number and handle the panic using defer-recover.
    Assert: Assert that the function throws a panic.
Validation:
    The function is expected to panic when supplied with negative numbers because the square root of a negative number is undefined in real numbers. Thus, this test is crucial to validating that the function correctly handles error conditions.
*/

// ********RoostGPT********

package calc

import (
	"runtime/debug"
	"testing"
)

func TestSquareRoot(t *testing.T) {

	testCases := []struct {
		name      string
		input     float64
		want      float64
		wantPanic bool
	}{
		{
			name:      "Test SquareRoot function with positive number",
			input:     4,
			want:      2,
			wantPanic: false,
		},
		{
			name:      "Test SquareRoot function with zero",
			input:     0,
			want:      0,
			wantPanic: false,
		},
		{
			name:      "Test SquareRoot function with negative number",
			input:     -4,
			wantPanic: true,
		},
	}

	for _, tt := range testCases {
		t.Run(tt.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered: %v\n%s", r, string(debug.Stack()))
					if tt.wantPanic == false {
						t.Fail()
					}
				}
			}()

			if got := SquareRoot(tt.input); got != tt.want && tt.wantPanic == false {
				t.Fatalf("SquareRoot() = %v, want %v", got, tt.want)
			} else if tt.wantPanic == false {
				t.Logf("SUCCESS: SquareRoot correctly computed for input %v", tt.input)
			}
		})
	}
}
