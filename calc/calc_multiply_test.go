// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=Multiply_7a2824e2c7
ROOST_METHOD_SIG_HASH=Multiply_0911ef76c1

FUNCTION_DEF=func Multiply(num1, num2 float64) float64 // Multiply two floating-point numbers

Scenario 1: Multiply Two Positive Numbers

Details:
  Description: This test checks the multiplication of two positive floating-point numbers to ensure the function returns the correct product.
Execution:
  Arrange: Define two positive floating-point numbers, num1 and num2.
  Act: Call the Multiply function with num1 and num2 as arguments.
  Assert: Verify that the result is equal to the expected product of num1 and num2.
Validation:
  The choice of assertion is straightforward as we are comparing the result of the multiplication with the expected product. This test is important to ensure the basic functionality of the Multiply function with common input values.


*/

// ********RoostGPT********

package calc

import (
	"fmt"
	"testing"
)

type TestCase struct {
	Num1      float64
	Num2      float64
	Expected  float64
	ErrorCase bool
}

func TestMultiply(t *testing.T) {

	testCases := []TestCase{
		{Num1: 2.5, Num2: 3.0, Expected: 7.5, ErrorCase: false},
		{Num1: -2.5, Num2: 3.0, Expected: -7.5, ErrorCase: false},
		{Num1: 2.5, Num2: -3.0, Expected: -7.5, ErrorCase: false},
		{Num1: 0, Num2: 3.0, Expected: 0, ErrorCase: false},
		{Num1: 2.5, Num2: 0, Expected: 0, ErrorCase: false},
		{Num1: -2.5, Num2: -3.0, Expected: 7.5, ErrorCase: false},
	}

	for i, tc := range testCases {
		t.Run(fmt.Sprintf("Test case %d", i), func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v", r)
					t.Fail()
				}
			}()

			result := Multiply(tc.Num1, tc.Num2)
			if result != tc.Expected {
				t.Logf("Test case %d failed: expected %f, got %f", i, tc.Expected, result)
				t.Fail()
			} else {
				t.Logf("Test case %d passed: expected %f, got %f", i, tc.Expected, result)
			}
		})
	}
}
