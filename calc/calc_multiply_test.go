// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=Multiply_7a2824e2c7
ROOST_METHOD_SIG_HASH=Multiply_0911ef76c1

FUNCTION_DEF=func Multiply(num1, num2 float64) float64 // Multiply two floating-point numbers

 1: Multiply two positive numbers

Details:
  Description: This test checks the basic functionality of the Multiply function by multiplying two positive floating-point numbers.
Execution:
  Arrange: Set up two positive floating-point numbers.
  Act: Invoke the Multiply function with the two positive numbers.
  Assert: Verify that the result is the product of the two numbers.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.


*/

// ********RoostGPT********


package calc

import (
	"math"
	"runtime/debug"
	"testing"
)







func TestMultiply(t *testing.T) {

	tests := []struct {
		name     string
		num1     float64
		num2     float64
		expected float64
	}{
		{"Positive Numbers", 2.5, 3.0, 7.5},
		{"Zero Multiplication", 0.0, 5.0, 0.0},
		{"Negative Numbers", -2.0, 3.0, -6.0},
		{"Negative and Positive Numbers", -2.0, -3.0, 6.0},
		{"Large Numbers", 1e10, 2.0, 2e10},
		{"Small Numbers", 1e-10, 2.0, 2e-10},
		{"Infinity", math.Inf(1), 2.0, math.Inf(1)},
		{"NaN", math.NaN(), 2.0, math.NaN()},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v\n%s", r, string(debug.Stack()))
					t.Fail()
				}
			}()

			result := Multiply(tt.num1, tt.num2)

			if result != tt.expected {
				t.Errorf("Multiply(%f, %f) = %f; want %f", tt.num1, tt.num2, result, tt.expected)
			} else {
				t.Logf("Multiply(%f, %f) = %f; expected %f", tt.num1, tt.num2, result, tt.expected)
			}
		})
	}
}