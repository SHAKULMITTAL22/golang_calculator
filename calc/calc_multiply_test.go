// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=Multiply_7a2824e2c7
ROOST_METHOD_SIG_HASH=Multiply_0911ef76c1

FUNCTION_DEF=func Multiply(num1, num2 float64) float64 // Multiply two floating-point numbers

Scenario 1: Basic Multiplication

Details:
  Description: This test checks the basic functionality of the Multiply function by multiplying two positive floating-point numbers.
Execution:
  Arrange: Define two positive floating-point numbers, num1 and num2.
  Act: Call the Multiply function with num1 and num2 as arguments.
  Assert: Verify that the returned result is equal to the product of num1 and num2.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

*/

// ********RoostGPT********

package calc

import (
	"math"
	runtime_debug "runtime/debug"
	"testing"
)

func TestMultiply(t *testing.T) {

	type test struct {
		num1        float64
		num2        float64
		expected    float64
		description string
	}

	tests := []test{
		{num1: 2.0, num2: 3.0, expected: 6.0, description: "Basic multiplication of 2 and 3"},
		{num1: -2.0, num2: 3.0, expected: -6.0, description: "Multiplying negative and positive numbers"},
	}

	for _, tt := range tests {
		t.Run(tt.description, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v\n%s", r, string(runtime_debug.Stack()))
					t.Fail()
				}
			}()

			result := Multiply(tt.num1, tt.num2)
			if !math.IsNaN(result) && !math.IsNaN(tt.expected) && result != tt.expected {
				t.Errorf("Multiply(%f, %f) = %f; want %f", tt.num1, tt.num2, result, tt.expected)
				t.Logf("Test failed for description: %s", tt.description)
			} else {
				t.Logf("Test passed for description: %s", tt.description)
			}
		})
	}
}
