// ********RoostGPT********
/*
Test generated by RoostGPT for test go-calculator using AI Type Azure Open AI and AI Model Inference

ROOST_METHOD_HASH=Power_1c67a5d8b5
ROOST_METHOD_SIG_HASH=Power_c74b8edd76

FUNCTION_DEF=func Power(base, exponent float64) float64 // Power function

Scenario 1: Power Function with Positive Base and Exponent

Details:
  Description: This test checks the basic functionality of the Power function with positive base and exponent values.
Execution:
  Arrange: Set up the test with a positive base and exponent.
  Act: Invoke the Power function with the base and exponent.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

Scenario 2: Power Function with Negative Base and Even Exponent

Details:
  Description: This test checks the behavior of the Power function when the base is negative and the exponent is an even number.
Execution:
  Arrange: Set up the test with a negative base and an even exponent.
  Act: Invoke the Power function with the negative base and even exponent.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

Scenario 3: Power Function with Negative Base and Odd Exponent

Details:
  Description: This test checks the behavior of the Power function when the base is negative and the exponent is an odd number.
Execution:
  Arrange: Set up the test with a negative base and an odd exponent.
  Act: Invoke the Power function with the negative base and odd exponent.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

Scenario 4: Power Function with Zero Base and Positive Exponent

Details:
  Description: This test checks the behavior of the Power function when the base is zero and the exponent is positive.
Execution:
  Arrange: Set up the test with a base of zero and a positive exponent.
  Act: Invoke the Power function with the zero base and positive exponent.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

Scenario 5: Power Function with Zero Base and Zero Exponent

Details:
  Description: This test checks the behavior of the Power function when both the base and the exponent are zero.
Execution:
  Arrange: Set up the test with both the base and the exponent as zero.
  Act: Invoke the Power function with both parameters as zero.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

Scenario 6: Power Function with Zero Base and Negative Exponent

Details:
  Description: This test checks the behavior of the Power function when the base is zero and the exponent is negative.
Execution:
  Arrange: Set up the test with a base of zero and a negative exponent.
  Act: Invoke the Power function with the zero base and negative exponent.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

Scenario 7: Power Function with Positive Base and Zero Exponent

Details:
  Description: This test checks the behavior of the Power function when the base is positive and the exponent is zero.
Execution:
  Arrange: Set up the test with a positive base and a zero exponent.
  Act: Invoke the Power function with the positive base and zero exponent.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

Scenario 8: Power Function with Negative Base and Zero Exponent

Details:
  Description: This test checks the behavior of the Power function when the base is negative and the exponent is zero.
Execution:
  Arrange: Set up the test with a negative base and a zero exponent.
  Act: Invoke the Power function with the negative base and zero exponent.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

Scenario 9: Power Function with Positive Base and Negative Exponent

Details:
  Description: This test checks the behavior of the Power function when the base is positive and the exponent is negative.
Execution:
  Arrange: Set up the test with a positive base and a negative exponent.
  Act: Invoke the Power function with the positive base and negative exponent.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

Scenario 10: Power Function with Negative Base and Negative Exponent

Details:
  Description: This test checks the behavior of the Power function when the base is negative and the exponent is negative.
Execution:
  Arrange: Set up the test with a negative base and a negative exponent.
  Act: Invoke the Power function with the negative base and negative exponent.
  Assert: Verify that the result matches the expected value calculated using math.Pow.
Validation:
  Explain the choice of assertion and the logic behind the expected result.
  Discuss the importance of the test in relation to the application's behavior or business requirements.

*/

// ********RoostGPT********


package calc

import (
	"math"
	"os"
	"runtime/debug"
	"testing"
)







func TestPower(t *testing.T) {

	tests := []struct {
		name     string
		base     float64
		exponent float64
		expected float64
	}{
		{"Positive Base and Exponent", 2, 3, 8},
		{"Negative Base and Even Exponent", -2, 2, 4},
		{"Negative Base and Odd Exponent", -2, 3, -8},
		{"Zero Base and Positive Exponent", 0, 2, 0},
		{"Zero Base and Zero Exponent", 0, 0, 1},
		{"Zero Base and Negative Exponent", 0, -2, math.Inf(1)},
		{"Positive Base and Zero Exponent", 2, 0, 1},
		{"Negative Base and Zero Exponent", -2, 0, 1},
		{"Positive Base and Negative Exponent", 2, -2, 0.25},
		{"Negative Base and Negative Exponent", -2, -2, 0.25},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v\n%s", r, string(debug.Stack()))
					t.Fail()
				}
			}()

			old := os.Stdout
			r, w, _ := os.Pipe()
			os.Stdout = w

			result := Power(tt.base, tt.exponent)

			w.Close()
			os.Stdout = old

			if result != tt.expected {
				t.Errorf("Power(%f, %f) = %f; want %f", tt.base, tt.exponent, result, tt.expected)
			} else {
				t.Logf("Power(%f, %f) = %f; expected %f", tt.base, tt.exponent, result, tt.expected)
			}
		})
	}
}