// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Absolute_d231f0ab10
ROOST_METHOD_SIG_HASH=Absolute_ec3c06e5a3

FUNCTION_DEF=func Absolute(num float64) float64 // Absolute value

Scenario 1: Positive number test

  Details:
    Description: This test is meant to check the correct output of the Absolute function when called with a positive number.
  Execution:
    Arrange: No setup is required in this case, as no external data, mocks or test doubles are used.
    Act: Invoke the Absolute function with a positive number (eg:7.3).
    Assert: Use Go testing facilities to verify that the result returned is the same as the number provided as num.
  Validation:
    The assertion is straightforward in this case â€” if input is a positive number, then the output must be same as input. This function is intended to return an absolute number; so, with a positive number as input, it should return the same number.

Scenario 2: Negative number test

  Details:
    Description: This test is meant to check the correct output of the Absolute function when called with a negative number.
  Execution:
    Arrange: No setup is required in this case, as no external data, mocks or test doubles are used.
    Act: Invoke the Absolute function with a negative number (eg: -4.2).
    Assert: Use Go testing facilities to verify that the result returned is the positive version of the number provided as num.
  Validation:
    This function is intended to return an absolute number; if given a negative number, it should return the same number but with a positive sign. For example the absolute value of -4.2 is 4.2.

Scenario 3: Zero test

  Details:
    Description: This test is meant to check the correct output of the Absolute function when called with zero.
  Execution:
    Arrange: No setup is required, as no external data, mocks, or test doubles are used.
    Act: Invoke the Absolute function with a 0.
    Assert: Use Go testing facilities to verify that the result returned is 0.
  Validation:
    The function should be able to handle edge cases such as Zero, and since Zero has no sign, it must return as it is. If the function fails this test, we know there is error in handling edge cases.
*/

// ********RoostGPT********

package calc

import (
	"testing"
)

func TestAbsolute(t *testing.T) {
	testCases := []struct {
		name     string
		num      float64
		expected float64
	}{
		{
			name:     "Positive number test",
			num:      7.3,
			expected: 7.3,
		},
		{
			name:     "Negative number test",
			num:      -4.2,
			expected: 4.2,
		},
		{
			name:     "Zero test",
			num:      0.0,
			expected: 0.0,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered. Failing test. %v", r)
					t.Fail()
				}
			}()

			result := Absolute(tc.num)

			if result != tc.expected {
				t.Fatalf("Expected %v, but got %v", tc.expected, result)
			} else {
				t.Logf("Success: Expected %v and got %v", tc.expected, result)
			}
		})
	}
}
