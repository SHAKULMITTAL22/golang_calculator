// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Absolute_d231f0ab10
ROOST_METHOD_SIG_HASH=Absolute_ec3c06e5a3

FUNCTION_DEF=func Absolute(num float64) float64 // Absolute value

```
Scenario 1: Test with positive number

Details:
  Description: This test checks that the Absolute function works correctly for positive numbers.
Execution:
  Arrange: No setup data needed
  Act: Call the Absolute function with a positive number, for example, 7.3
  Assert: Check that the resulting value is 7.3
Validation:
  The logic behind the expected result is that absolute of a positive number is the same number itself. This is a basic functionality test which is important to ensure that the function works correctly in the most common scenarios.

Scenario 2: Test with negative number

Details:
  Description: This test checks that the Absolute function works correctly for negative numbers.
Execution:
  Arrange: No setup data needed
  Act: Call the Absolute function with a negative number, for example, -9.5
  Assert: Check that the resulting value is 9.5
Validation:
  The logic behind the expected result is that absolute of a negative number is the positive of the same number. This test scenario is important to ensure that the function is working correctly and returning the correct value for negative numbers.

Scenario 3: Test with zero

Details:
  Description: This test checks that the Absolute function works correctly for zero.
Execution:
  Arrange: No setup data needed
  Act: Call the Absolute function with 0
  Assert: Check that the resulting value is 0
Validation:
  The logic behind the expected result is that absolute of zero should be zero. This is a basic functionality test to check that the function handles edge case correctly.

Scenario 4: Test with floating number

Details:
  Description: This test checks that the Absolute function works correctly for floating numbers.
Execution:
  Arrange: No setup data needed
  Act: Call the Absolute function with a floating number, for example, -3.14159
  Assert: Check that the resulting value is 3.14159
Validation:
  The logic behind the expected result is that absolute of a floating negative number is the positive of the same number. This test scenario ensures that the function handles floating numbers correctly.
```
*/

// ********RoostGPT********

package calc

import (
	"math"
	"testing"
)

func TestAbsolute(t *testing.T) {
	type args struct {
		num float64
	}
	tests := []struct {
		name string
		args args
		want float64
	}{
		{
			name: "Test with positive number",
			args: args{num: 7.3},
			want: 7.3,
		},
		{
			name: "Test with negative number",
			args: args{num: -9.5},
			want: 9.5,
		},
		{
			name: "Test with zero",
			args: args{num: 0},
			want: 0,
		},
		{
			name: "Test with floating number",
			args: args{num: -3.14159},
			want: 3.14159,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v", r)
					t.Fail()
				}
			}()

			if got := Absolute(tt.args.num); math.Abs(got-tt.want) > 1e-9 {
				t.Errorf("Absolute() = %v, want %v", got, tt.want)
			} else {
				t.Logf("Absolute() = %v, passed successfully", got)
			}
		})
	}
}
