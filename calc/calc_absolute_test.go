// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Absolute_d231f0ab10
ROOST_METHOD_SIG_HASH=Absolute_ec3c06e5a3

FUNCTION_DEF=func Absolute(num float64) float64 // Absolute value

Scenario 1: Testing with positive number
Details:
 This test is used to verify if the function correctly return the absolute of a positive number.
Execution:
  Arrange: Set the input as 199.3
  Act: Invoke the Absolute function with 199.3 parameter
  Assert: The function should return 199.3
Validation:
  The logic here is relatively simple. Since number is positive, absolute of a positive number is the number itself. This test covers the common and most straightforward usage of the function.

Scenario 2: Testing with negative number
Details:
 This test is to check whether the function correctly handles negative inputs.
Execution:
  Arrange: Set the input as -99.99
  Act : Invoke the Absolute function with -99.99 as the parameter
  Assert : The function should return 99.99
Validation:
  The absolute value of a negative number is the positive number (the same number without the negative sign). Hence this test is used to ensure the negative inputs are correctly handled.

Scenario 3: Testing with Zero
Details:
 This test is to ensure the function correctly handles zero as input.
Execution:
  Arrange: Set the input as 0
  Act: Invoke the Absolute function with 0 as parameter.
  Assert: The function should return 0
Validation:
  The Absolute function should return 0 when input is 0. This test case is to ensure the function correctly handles the scenario when the input is 0.

Scenario 4: Testing with NaN
Details:
  This test is used to verify that the function handles not a number (NaN) correctly.
Execution:
  Arrange: Set the input as NaN
  Act: Invoke the Absolute function with NaN as the parameter
  Assert: The function return NaN
Validation:
  The function should return NaN when the input is NaN. This scenario is used to test the function's ability to handle invalid inputs.

Scenario 5: Testing with Infinity
Details:
 This test is to ensure the function can handle infinity correctly.
Execution:
  Arrange: Set the input as positive infinity
  Act : Invoke the Absolute function with infinity as the parameter
  Assert: The function should return positive infinity
Validation:
 The logic is straightforward. Since Infinity is considered as a positive number, the absolute of Infinity is Infinity itself.
*/

// ********RoostGPT********

package calc

import (
	"math"
	"testing"
)

func TestAbsolute(t *testing.T) {

	cases := []struct {
		name     string
		input    float64
		expected float64
	}{
		{"Testing with positive number", 199.3, 199.3},
		{"Testing with negative number", -99.99, 99.99},
		{"Testing with Zero", 0, 0},
		{"Testing with NaN", math.NaN(), math.NaN()},
		{"Testing with Infinity", math.Inf(1), math.Inf(1)},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v", r)
					t.Fail()
				}
			}()

			result := Absolute(tc.input)
			if tc.input != math.NaN() && result != tc.expected {
				t.Errorf("Test %v failed. Expected %v, but got %v", tc.name, tc.expected, result)
			} else if tc.input == math.NaN() && !math.IsNaN(result) {

				t.Errorf("Test %v failed. Expected NaN, but got %v", tc.name, result)
			} else {
				t.Logf("Test %v pass.", tc.name)
			}
		})
	}
}
