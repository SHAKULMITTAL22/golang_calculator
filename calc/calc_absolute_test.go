// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Absolute_d231f0ab10
ROOST_METHOD_SIG_HASH=Absolute_ec3c06e5a3

FUNCTION_DEF=func Absolute(num float64) float64 // Absolute value

Scenario 1: Positive Number
  Details:
    Description: This test is meant to check the Absolute function using a positive number.
  Execution:
    Arrange: No arrangements are necessary as we are providing a hard-coded positive float64 value.
    Act: Invoke the Absolute function with a positive float64 number as a parameter.
    Assert: Verify that the returned value from the Absolute function is the same as the input value.
  Validation:
    As the input number is already positive, the absolute function should return the same number. This test verifies the general operation of the absolute function with positive numbers.

Scenario 2: Negative Number
  Details:
    Description: This test is meant to check the Absolute function using a negative number.
  Execution:
    Arrange: No arrangements are necessary as we are providing a hard-coded negative float64 value.
    Act: Invoke the Absolute function with a negative float64 number as a parameter.
    Assert: Verify that the returned value from the Absolute function is the same as the negative of the input value.
  Validation:
    As the input number is negative, the absolute function should return the positive equivalent of the number. This test verifies the functionality of the absolute function with negative numbers.

Scenario 3: Zero
  Details:
    Description: This test is meant to check the Absolute function using zero.
  Execution:
    Arrange: No arrangements are necessary as we are providing a hard-coded zero float64 value.
    Act: Invoke the Absolute function with zero as a parameter.
    Assert: Verify that the returned value from the Absolute function is zero.
  Validation:
    As the input number is zero, the absolute function should return zero. This test verifies the functionality of the absolute function working with zero.

Scenario 4: Float64 Maximum Value
  Details:
    Description: This test is meant to check the Absolute function using the maximum value of float64.
  Execution:
    Arrange: No arrangements are necessary as we are providing a constant value math.MaxFloat64.
    Act: Invoke the Absolute function with math.MaxFloat64 as a parameter.
    Assert: Verify that the returned value from the Absolute function is the same as math.MaxFloat64.
  Validation:
    Despite the input number being the maximum value of float64, the absolute function should return the same value. This test verifies the operation of the absolute function under extreme conditions.

Scenario 5: Float64 Infinity Value
  Details:
    Description: This test is meant to check the Absolute function using infinity value.
  Execution:
    Arrange: No arrangements are necessary as we are providing a constant value math.Inf(1).
    Act: Invoke the Absolute function with math.Inf(1) as a parameter.
    Assert: Verify that the returned value from the Absolute function is the same as math.Inf(1).
  Validation:
    Despite the input number being infinity, the absolute function should return the same value. This test verifies how the absolute function performs under extreme conditions.

*/

// ********RoostGPT********

package calc

import (
	"math"
	"runtime/debug"
	"testing"
)

func TestAbsolute(t *testing.T) {

	var tests = []struct {
		name  string
		input float64
		want  float64
	}{
		{"Positive Number", 5.5, 5.5},
		{"Negative Number", -5.5, 5.5},
		{"Zero", 0.0, 0.0},
		{"Float64 Maximum Value", math.MaxFloat64, math.MaxFloat64},
		{"Float64 Infinity Value", math.Inf(1), math.Inf(1)},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered so failing test. %v\n%s", r, string(debug.Stack()))
					t.Fail()
				}
			}()

			got := Absolute(tt.input)

			if got != tt.want {
				t.Errorf("Absolute() = %v, want %v", got, tt.want)
			} else {
				t.Logf("Success: %s\n Absolute(%v) = %v, as expected.", tt.name, tt.input, got)
			}
		})
	}
}
