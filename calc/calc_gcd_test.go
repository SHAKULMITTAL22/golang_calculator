// ********RoostGPT********
/*
Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test new-go-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=GCD_6cf0472095
ROOST_METHOD_SIG_HASH=GCD_ab1c91475d

FUNCTION_DEF=func GCD(a, b int) int
Scenario 1: Testing for Non-Zero Values

Details:
Description: This test is meant to check if the GCD function works correctly when being input with non-zero values.

Execution:
Arrange: No mocks or special setups are required. Initialize two variable a=12 and b=15 for instance.
Act: Call the GCD function.
Assert: Assert to the correct answer.

Validation: If the function implements the algorithm for finding the greatest common divisor (gcd) correctly, it should return 3 for GCD(12,15). This test is important as it verifies the basic functionality of the gcd function.

Scenario 2: Using a Zero as a Value

Details:
Description: This test checks how the GCD function behaves when one of the inputs (or both) is zero.

Execution:
Arrange: No special setups or mocking is required. Initialize a to some number and b to 0.
Act: Call the GCD function
Assert: Assert that the returned value is the non-zero input.

Validation: According to the mathematics rule, if one of the input values to GCD is zero, then the gcd is the non-zero input. Thus, this scenario verifies the correctness of the implementation with respect to this case.

Scenario 3: Testing with Negative Inputs

Details:
Description: This test checks if the function can correctly calculate GCD when one or both inputs are negative.

Execution:
Arrange: No special setups or mocking is required. Initialize two variables, a and b as negative integers.
Act: Call the function GCD with a and b as parameters.
Assert: Assert that the returned value is the correct GCD taking the absolute values of a and b.

Validation: The GCD of negative numbers are the absolute value of the GCD of these numbers if they were positive, so the result should be the same regardless if the inputs are negative.

Scenario 4: Large Inputs

Details:
Description: This test checks the function's capacity to handle very large input.

Execution:
Arrange: Declare two large int variables, like go's MaxInt value.
Act: Call the function GCD.
Assert: Assert with the correct GCD value.

Validation: This test is important to test the limit of the function, it verifies the algorithm can handle such inputs without causing any overflow errors or performance issues.
*/

// ********RoostGPT********

package calc

import (
	"math"
	"runtime/debug"
	"testing"
)

func TestGcd(t *testing.T) {

	type test struct {
		name     string
		a        int
		b        int
		expected int
	}

	tests := []test{
		{name: "Non-Zero values", a: 12, b: 15, expected: 3},
		{name: "Zero as a value", a: 12, b: 0, expected: 12},
		{name: "Negative Inputs", a: -12, b: -15, expected: 3},
		{name: "Large Inputs", a: math.MaxInt64, b: math.MaxInt64, expected: math.MaxInt64},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered during the %s test: %v\n%s", tc.name, r, string(debug.Stack()))
					t.Fail()
				}
			}()

			got := GCD(tc.a, tc.b)

			if got != tc.expected {
				t.Errorf("For test %s, expected %d, but got %d", tc.name, tc.expected, got)
				t.Fail()
			} else {
				t.Logf("For test %s, expected %d and got %d", tc.name, tc.expected, got)
			}
		})
	}
}
